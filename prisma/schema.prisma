// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum UserRole {
  USER
  ADMIN
}

enum Recurrence {
  NONE
  DAILY
  MONTHLY
  YEARLY
  RANGE
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  // tokens        Int       @default(10000)
  role          UserRole  @default(USER)
  accounts      Account[]
  chat          Notes[]
}

model Account {
  id                 String  @id @default(auto()) @map("_id") @db.ObjectId
  userId             String  @db.ObjectId
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id            String @id @default(auto()) @map("_id") @db.ObjectId
  email         String
  token         String @unique
  expires       DateTime

  @@unique([email, token])
}

model Notes {
  id            String @id @default(auto()) @map("_id") @db.ObjectId
  title         String
  description   String?
  date          DateTime
  recurrence    Recurrence
  range         Range[]
  userId        String @db.ObjectId
  user          User   @relation(fields: [userId], references: [id])
}

model Range {
  id            String @id @default(auto()) @map("_id") @db.ObjectId
  startDate     DateTime
  endDate       DateTime
  noteId        String @db.ObjectId
  note          Notes   @relation(fields: [noteId], references: [id], onDelete: Cascade)

  @@index([noteId])
}